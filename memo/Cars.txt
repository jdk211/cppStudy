virtual 소멸자 - 각자 소멸자 실행...
virtual -> 상속
override -> 재정의 함수

class parent
{
public:
    virtual void FuncA();
}

class child
{
public:
    void FuncA() override;
}

-------------------------------------
구식
typedef ValueType ValueName;
신식
using ValueName = ValueType;

-------------------------------------
꼭... 맴버 변수는 private으로...

-------------------------------------
move parameter
unique_ptr type은 무브로 넣어줘야함. 
parameter 앞에 &&를 붙여서 명시함.
void FuncA(ValueType&& param);

-------------------------------------
for (auto it = m_vecComponents.begin(); it != m_vecComponents.end(); ++it)
{
    (*it)->Update(Delta);
}
이 구문은 it를 한번 포인터로 랩핑을 해줘야함

for (auto& comp : m_vecComponents)
{
    comp->Update(Delta);
}
이 구분은 안해줘도 됨

--------------------------------------
주소로 받을때는 &
포인터 받는 변수로 선언할때는 *

--------------------------------------
이름이 없는 생성자는 move가 실행된다.

car1->AddComponent(ComponentPtr(new ComponentEngine("NewCoreEngine", car1, 10.0f, 10.0f, 10.0f)));

--------------------------------------
void AddFunc() = delete;
이 함수를 사용하지 않겠다 삭제해줌

class A
{
public:
    A(const A& a) = delete;
    A& operator= (const A& a) = delete;
}
해당 생성자를 사용하지 않겠다.

--------------------------------------
auto a = make_shared<A>() -> 객체 A를 생성하고 그 객체의 포인터를 a가 공유
a -> |count|A object|
 A shared_ptr는 다른 개체에 대한 포인터를 저장하는 동안 개체의 소유권을 공유 할 수 있습니다. get()관리 포인터가 아닌 저장된 포인터를 반환합니다.

make_unique<A>


--------------------------------------
make_shared<>에 나오는 다양한 수의 파라미터 넘겨주는 방법

class A : std::enable_shared_from_this<T> 

template<typename T, class... _Types> void CreateCompnent(_Types&&... _Args)
{
    m_vecComponents.emplace_back(ComponentPtr(new T(shared_from_this(), _STD forward<_Types>(_Args)...)));
}

이렇게 하면 다양한 Component를 한 함수로 받을 수 있다.

이전에는 뭐.... 1을 받으면 Engine을 만들고 2를 받으면 OilTank를 만드는 식으로 노가다를함... 나중에 추가되면 또 만들어줌
위 문법을 사용해서 다양한 class를 함수의 변경없이 받을 수 있다.
각 class가 받는 parameter가 다양하더라도 문제없이 받을 수 있다.

class A : std::enable_shared_from_this<T> 
shared_from_this() -> 다양한 객체의 형을 받았는데 이 객체를 인자로 넘겨주거나 할때 각 객체의 형을 써줄수는 없으니까 this를 사용해야하는데
그것을 처리해주는 템플릿 함수

----------------------------------------
subversion -> server에 무조건 올라감
git -> local pc에 stashing해서 해당 version을 가지고 있다가 나중에 push해서 올린다. 
항상 올리기 전에는 문제가 없는지 컴파일 및 실행 확인하고
뭔가 추가 될때마다 커밋해야하고 기능 추가된 경우도 추가

atomic한 단위로 커밋한다.
쪼갤수없는? 예를 들면
|monster A|monster B|monster C| 중에
A와 B의 수정사항이 있으면 A를 수정하고 올리고
B를 수정하고 올리고 단위로 쪼개서 올린다.

-----------------------------------------
#include<numeric>
std::accumulate() -> 기존 for(0...10) { result += 0...10 }처럼 for문으로 계속 더하기를 하던 방식을 템플릿으로 만든것
iterator로 넘기는 것은 ref로 받아야한다...

-----------------------------------------
파라미터로 객체를 받을땐 ref...로....
const 함수 잘 쓰기...
생성이 있으면 소멸도 있다...

-----------------------------------------
auto &&루프 내에서 시퀀스 값을 수정하고 버리는 기능에 사용 합니다. (즉, 컨테이너가과 같은 읽기 전용보기를 제공하지 않는 한, std::initializer_list이 경우 사실상 auto const &.)
auto &의미있는 방식으로 시퀀스 값을 수정하는 데 사용 합니다.
auto const &읽기 전용 액세스에 사용 합니다.
auto(수정 가능한) 사본 작업에 사용 합니다.

& is the reference operator and can be read as “address of”.
* is the dereference operator and can be read as “value pointed by”.

& is the reference operator    
* is the dereference operator

The dereference operator * is also called the indirection operator.

-------------------------------------------

find
iterator의 시작과 끝을 받아 마지막 파라미터의 값이 들어있는 iterator를 반환한다
없으면 end()를 반환해서 비교해서 사용

ex) auto it = std::find(Standings.begin(), Standings.end(), i);


find_if
find와 같다 하지만 람다를 사용한다는 점에서 다르다

ex) std::accumulate와는 전달 인자가 다르다... 서로 기능이 다르기때문...
auto it = std::find_if(m_vecComponents.begin(), m_vecComponents.end(),
		[](const ComponentPtr& comp)->bool
		{
			return comp->GetName() == "NewCoreEngine";
		}
	);

-------------------------------------------

using APtr = std::unique_ptr<A>;
using VECA = std::vector<APtr>;
VECA vecA;

std::unique_ptr<A>  -> A* (복사할수 없는)
VECA::iterator      -> APtr의 dereference -> A

APtr a = std::make_unique<A>("A");
APtr b = a; //대입, 값의 복사이기 때문에 안됨
APtr& b = a; //APtr의 &를 받는다 주소를 받겠다 a의 주소를 받아감
APtr c = std::move(a);


--------------------------------------------

static_cast 
보통 static을 사용한다 dynamic은 너무 무겁다
*를 사용하자 static_cast<ComponentEngine*>(engine.get())->GetConsumeRate();

dynamic_cast 
parent를 상속받은 class c1, class c2가 있다면 
c1을 c2 클래스로 casting할 때 사용한다.

--------------------------------------------
static_cast, dynamic_cast는 너무 무겁기 때문에
부모 클래스에 각 형에 맞는 GetParameterInt(name), GetParameterFloat(name) ...
함수들을 만들어서 리턴을 받는다.

--------------------------------------------

#include <thread>
#include <chrono>
#include <mutex>

//recursive 재진입이 가능한
std::recursive_mutex mutex_a;
int a = 0;

void addA()
{
	//mutex_a.lock();
	//mutex_a.unlock();

	{
		//lock guard 지역안에서 unlock까지 해줌
		std::lock_guard<std::recursive_mutex> l(mutex_a);
		++a;
	}

	std::chrono::nanoseconds timespan(rand() % 128);
	std::this_thread::sleep_for(timespan);

	{
		std::lock_guard<std::recursive_mutex> l(mutex_a);
		--a;
	}
}

int main()
{
	const int MaxThread = 4;
	std::thread threads[MaxThread];
	for (int t = 0; t < MaxThread; ++t)
	{
		threads[t] = std::thread([]()
			{
				for (int i = 0; i < 100; ++i)
				{
					addA();
				}
			}
		);
	}

	for (int i = 0; i < MaxThread; ++i)
	{
		threads[i].join();
	}

	std::cout << a << std::endl;
}

-----------------------------------------

using namespace std::chrono_literals; -> XXms, XXm, XXs 가능

std::lock_guard<std::mutex> l(mutex 변수...);
std::this_thread::sleep_for(16ms); 

std::chrono::high_resolution_clock::now();

RAII -> 공부하기...

-----------------------------------------

숙제가...  std::chrono::duration_cast<std::chrono::milliseconds>(currentTick - beforeTick).count() / 1000.0f 연산 안하고 chrono에서 해주는 함수
cout << chrono::duration_cast<chrono::duration<float>>(end - start).count() << endl; 맞음...

// impl 구조 - 공부


